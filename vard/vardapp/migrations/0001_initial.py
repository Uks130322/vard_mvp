# Generated by Django 4.2.11 on 2024-05-06 12:33

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import vardapp.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('name', models.CharField(max_length=255, verbose_name='name of user')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email of user')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date of sign up')),
                ('date_password_change', models.DateTimeField(auto_now=True, verbose_name='date of password change')),
                ('password', models.CharField(max_length=255, verbose_name='password')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('random_field', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date of creation')),
                ('date_change', models.DateTimeField(auto_now=True, verbose_name='date of change')),
                ('str_query', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChartDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vardapp.chart')),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_id', models.IntegerField(choices=[(1, 'Community'), (2, 'Myfiles'), (3, 'Bestpractices')], default=2, verbose_name='id of place file')),
                ('type_id', models.IntegerField(choices=[(1, 'Csv'), (2, 'Json'), (3, 'Pdf')], verbose_name='id type of file')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date of creation')),
                ('date_change', models.DateTimeField(auto_now=True, verbose_name='date of change')),
                ('date_delete', models.DateTimeField(blank=True, null=True, verbose_name='date of delete')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name of file')),
                ('link', models.FileField(blank=True, upload_to=vardapp.utils.user_directory_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'csv', 'json'])], verbose_name='link of file')),
                ('publish', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date of creation')),
                ('theme', models.CharField(max_length=255, verbose_name='theme of feedback')),
                ('description', models.TextField(verbose_name='feedback')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date of creation')),
                ('date_change', models.DateTimeField(auto_now=True, verbose_name='date of change')),
                ('chart', models.ManyToManyField(blank=True, through='vardapp.ChartDashboard', to='vardapp.chart')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_send', models.DateTimeField(auto_now_add=True, verbose_name='date of send')),
                ('date_remove', models.DateTimeField(auto_now_add=True, verbose_name='date of remove')),
                ('date_delivery', models.DateTimeField(auto_now_add=True, verbose_name='date of delivery')),
                ('comment', models.TextField(verbose_name='comment')),
                ('chart_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='vardapp.chart', verbose_name='chart id')),
                ('dashboard_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='vardapp.dashboard', verbose_name='dashboard id')),
                ('file_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='vardapp.file', verbose_name='file id')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
        ),
        migrations.CreateModel(
            name='ClientDB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_name', models.CharField(default='', max_length=255)),
                ('user_name', models.CharField(max_length=16)),
                ('password', models.CharField(max_length=128)),
                ('driver', models.IntegerField(choices=[(1, 'SQLAlchemy for MySQL')], default=1)),
                ('url', models.CharField(max_length=255, null=True)),
                ('host', models.CharField(default='localhost', max_length=60, null=True)),
                ('port', models.IntegerField(default=3306, null=True)),
                ('data_base_type', models.CharField(max_length=255, null=True)),
                ('data_base_name', models.CharField(max_length=63)),
                ('description', models.CharField(max_length=255, null=True)),
                ('str_datas_for_connection', models.CharField(blank=True, max_length=255, null=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClientData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField(blank=True, null=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
        ),
        migrations.AddField(
            model_name='chartdashboard',
            name='dashboard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vardapp.dashboard'),
        ),
        migrations.AddField(
            model_name='chart',
            name='clientdata',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='vardapp.clientdata'),
        ),
        migrations.AddField(
            model_name='chart',
            name='clientdb_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vardapp.clientdb', verbose_name='clientdb id'),
        ),
        migrations.AddField(
            model_name='chart',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id'),
        ),
        migrations.CreateModel(
            name='ReadComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reading', models.DateTimeField(auto_now_add=True, verbose_name='date of read')),
                ('comment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vardapp.comment', verbose_name='id of comment')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='id of user')),
            ],
            options={
                'unique_together': {('comment_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type_id', models.IntegerField(choices=[(1, 'Reader'), (3, 'Commentator'), (4, 'Editor')], verbose_name='access type id')),
                ('date_access_open', models.DateTimeField(auto_now=True, verbose_name='date access open')),
                ('date_access_close', models.DateTimeField(auto_now=True, verbose_name='date access close')),
                ('owner_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL, verbose_name='owner id')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invited_user', to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
            options={
                'unique_together': {('owner_id', 'user_id')},
            },
        ),
    ]
